* Start here
=~/.emacs=:

#+BEGIN_EXAMPLE
;; Then the org file can be tangled and loaded
(org-babel-load-file
 (expand-file-name "emacs.org"
                   user-emacs-directory))
#+END_EXAMPLE

* Package installation
#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("MELPA" . "https://melpa.org/packages/")
        ("GNU" . "https://elpa.gnu.org/packages/")))

(setq package-list '(flycheck
                     magit
                     base16-theme
                     slime
                     ace-window))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC

* General GNU Emacs configuration
** GNU Emacs behaviour and screen settings
*** Load and configure the Emacs theme
#+BEGIN_SRC emacs-lisp
;; Set the starting theme
(load-theme 'chocolate t)

;; Highlight color for the current theme
(require 'hl-line)
;(set-face-background 'hl-line "#e2e2e2")

(custom-set-faces '(default ((t (:background "#040100")))))
(custom-set-faces '(region ((t (:background "#170a02")))))
(set-face-background hl-line-face "#261407")

;; Use the "normal" syntax highlight under the hl-line
(set-face-foreground 'highlight nil)

(setq calendar-latitude 47.4979)
(setq calendar-longitude 19.0402)
(setq calendar-location-name "Budapest, HU")
(setq calendar-standard-time-zone-name "CET")
(setq calendar-daylight-time-zone-name "CEST")
#+END_SRC

#+begin_src emacs-lisp
;; Set the text size
(set-face-attribute 'default nil :height 140)
#+end_src

*** No toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

*** No menubar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** No scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

*** No startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen 1)
#+END_SRC

*** No startup echo area message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-echo-area-message 1)
#+END_SRC

*** No scratch buffer message
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC

*** Always split the windows vertically
#+BEGIN_SRC emacs-lisp
;(setq split-width-threshold 1)
#+END_SRC

*** Echo keystrokes immediately
#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

*** Do not blink the cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC

*** Set the cursor type
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'hbar)
#+END_SRC

*** Show the matching parenthesis or expression
#+BEGIN_SRC emacs-lisp
;; Always show the matching parenthesis
(show-paren-mode 1)

;; Show the expression or the matching parenthesis
(setq show-paren-style 'mixed)
#+END_SRC

*** Disable ring and visual bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

*** Open the Emacs configuration files with one key
It is a macro becaue I practiced writing macros...
It'll be rewritten to defun instead later.
#+BEGIN_SRC emacs-lisp
;; Macro that creates full paths to the config files
(defmacro tmolnar/find-econf-files (filename)
  "Look for the configuration file in the default directory and /~"
  `(if (file-exists-p (concat user-emacs-directory ,filename))
       (concat user-emacs-directory ,filename)
     (expand-file-name ,filename "~/")))

;; Function that opens the provided config file list
(defun tmolnar/open-emacs-config-files ()
  "Looping over the list of configuration files and opening them"
  (interactive)
  (let ((my-files '("init.el" "emacs.org" ".emacs")))
    (dolist (f my-files)
      (find-file (tmolnar/find-econf-files f)))))
#+END_SRC

*** Custom keybindings and rebindings
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<f10>"))                                ; Unset the F10
(global-set-key (kbd "<f12>") 'tmolnar/open-emacs-config-files) ; F12 - open Emacs files
(global-set-key (kbd "M-2") 'end-of-buffer)                     ; Move point to the end of buffer
(global-set-key (kbd "M-3") 'beginning-of-buffer)               ; Move point to the beginning of buffer
#+END_SRC

*** Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Tamás Molnár"
      user-mail-address "tmolnar0831@gmail.com")
#+END_SRC

*** Start the Emacs server
Setting up Emacs as an edit server, so it "listens" for external edit requests, and acts accordingly.
The =emacsclient= can connect to the Emacs process and tell it to visit a file.

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

*** Confirm on exit Emacs
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

*** Revert buffer when the file changes on the disk
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

*** Set ediff to split the window always horizontally
#+BEGIN_SRC emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

*** Save the minibuffer history
#+BEGIN_SRC emacs-lisp
(savehist-mode 1)
#+END_SRC

*** Start the calendar with Monday
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1)
#+END_SRC

*** y or n instead of yes or no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Use spaces instead of tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Set the inferior Lisp variable
#+BEGIN_SRC emacs-lisp
(if (and (file-exists-p "/usr/bin/sbcl")
         (file-executable-p "/usr/bin/sbcl"))
    (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq inferior-lisp-program "/usr/bin/clisp"))
#+END_SRC

*** Enable narrow-to-region
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Enable erase-buffer
#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
#+END_SRC

*** Tramp mode use SSH
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

*** Mitigate the lag when ~next-line~ is called
#+BEGIN_SRC emacs-lisp
(setq auto-window-vscroll nil)
#+END_SRC

*** Backup and auto-save configuration
**** Do not symlink the backups
  #+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
  #+END_SRC

**** Backup files into the ~/.emacs.d/backups
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  #+END_SRC

**** Buffer file name for auto-saves
  #+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  #+END_SRC

**** Backup handling
  #+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
  #+END_SRC

*** Diary file
#+begin_src emacs-lisp
(setq diary-file "~/OneDrive/Documents/org/organizer/diary")
#+end_src
** General major and minor modes configuration
*** Show line numbers only in major programming modes
#+BEGIN_SRC emacs-lisp
(setq global-linum-mode nil)
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

*** Load the jinja2-mode on .j2 files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.j2\\'" . jinja2-mode))
#+END_SRC

*** Global highlight line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

*** Ibuffer
**** Use ibuffer as buffer menu
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

**** Ibuffer buffer groups
#+BEGIN_SRC emacs-lisp
(setq ibuffer-saved-filter-groups
      '(("tmolnar/ibuffer-groups"
         ("Org Agenda" (name . "\*Org Agenda\*"))
         ("Emacs Configuration files" (or (filename . "emacs\.d")
                                          (filename . "\.emacs")))
         ("ERC" (mode . erc-mode))
         ("Org Mode" (or (mode . org-mode)
                         (filename . "org")))
         ("Emacs Lisp" (mode . emacs-lisp-mode))
         ("Common Lisp REPL" (mode . slime-repl-mode))
         ("Common Lisp" (mode . lisp-mode))
         ("Perl" (mode . perl-mode))
         ("TCL/Tk" (mode . tcl-mode))
         ("Python" (mode . python-mode))
         ("Ansible/YAML" (mode . yaml-mode))
         ("Jinja2" (mode . jinja2-mode))
         ("Tramp" (or (name . "tramp")
                      (filename . "scp")))
         ("Help" (or (name . "\*Help\*")
                     (name . "\*Apropos\*")
                     (name . "\*info\*"))))))

(add-hook 'ibuffer-mode-hook
          '(lambda ()
             (ibuffer-switch-to-saved-filter-groups "tmolnar/ibuffer-groups")))
#+END_SRC

**** Ibuffer keep the list up to date
#+BEGIN_SRC emacs-lisp
(add-hook 'ibuffer-mode-hook
    '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "tmolnar/ibuffer-groups")))
#+END_SRC

**** Ibuffer do not ask when killing a buffer
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC

**** Ibuffer do not show empty groups
#+BEGIN_SRC emacs-lisp
(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

*** IDO
**** Any item containing the entered characters in the given sequence will match
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
#+END_SRC

**** Enabling ido mode
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
#+END_SRC

**** Enabling ido-mode in every buffer
#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
#+END_SRC

**** Ido mode always create new buffer
#+BEGIN_SRC emacs-lisp
(setq ido-create-new-buffer 'always)
#+END_SRC

*** SLIME
#+BEGIN_SRC emacs-lisp
(slime-setup '(slime-fancy slime-banner slime-indentation))
#+END_SRC

*** ERC
#+BEGIN_SRC emacs-lisp
;; Loading the secrets for ERC
(if (file-exists-p (expand-file-name "~/.emacs.d/.erc-secret.el"))
    (load (expand-file-name "~/.emacs.d/.erc-secret.el")))

;; Rename server buffers to reflect the current network name
(setq erc-rename-buffers t)

;; Interpret mIRC-style color commands in IRC chats
(setq erc-interpret-mirc-color t)

;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)

;; Kill buffers for private queries after quitting the server
(setq erc-kill-queries-on-quit t)

;; Kill buffers for server messages after quitting the server
(setq erc-kill-server-buffer-on-quit t)

(defun tmolnar/mark-read ()
  "Mark buffer as read up to current line."
  (let ((inhibit-read-only t)) ; disregard the read-only status of the buffer
    (put-text-property
     (point-min) (line-beginning-position)
     'face       'font-lock-comment-face)))

(defun tmolnar/bury-buffer ()
  "Bury buffer and maybe close its window."
  (interactive)
  (tmolnar/mark-read)
  (bury-buffer)
  (when (cdr (window-list nil 'nomini))
    (delete-window)))

(eval-after-load 'erc
  '(define-key erc-mode-map (kbd "<escape>")
     #'tmolnar/bury-buffer))

;; Hide join, part and quit messages
;(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
(setq magit-diff-highlight-indentation nil
      magit-diff-highlight-trailing nil
      magit-diff-paint-whitespace nil
      magit-diff-highlight-hunk-body nil
      magit-diff-refine-hunk nil)

(remove-hook 'magit-refs-sections-hook 'magit-insert-tags)

(remove-hook 'server-switch-hook 'magit-commit-diff)

(setq vc-handled-backends nil)
#+END_SRC

*** ACE Window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

* ORG mode configuration
** Set the startup visibility
#+begin_src emacs-lisp
(setq org-startup-folded t)
#+end_src
** Agenda
*** Agenda files source directory
#+BEGIN_SRC emacs-lisp 
(if (file-directory-p "~/OneDrive/Documents/org/organizer")
    (setq org-agenda-files '("~/OneDrive/Documents/org/organizer/")))
#+END_SRC

*** Custom Agenda Emacs Lisp functions
#+BEGIN_SRC emacs-lisp
;;; Finding Projects and Tasks for the Org Agenda

(defun tmolnar/org-has-child-p ()
  "Check if the item has a child element."
  (interactive)
  (save-excursion
    (org-goto-first-child)))

(defun tmolnar/skip-projects ()
  "Skip the elements with children."
  (interactive)
  (save-restriction
    (widen)
    (let ((next-org-headline (save-excursion (or (outline-next-heading)
                                                 (point-max)))))
      (cond
       ((tmolnar/org-has-child-p) next-org-headline) ;returns t if has children => skip project
       (t nil)))))                                   ;default                   => don't skip it

(defun tmolnar/skip-tasks ()
  "Skip the elements without children."
  (interactive)
  (save-restriction
    (widen)
    (let ((next-org-headline (save-excursion (or (outline-next-heading)
                                                 (point-max)))))
      (cond
       ((not (tmolnar/org-has-child-p)) next-org-headline) ;returns t if does not have children => skip task
       (t nil)))))                                         ;default                             => don't skip it

;;; Narrowing to projects in the Org Agenda
(defun tmolnar/jump-to-parent-task ()
  "Jump the point to the top parent task if it is a TODO item."
  (interactive)
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun tmolnar/org-narrow-to-subtree ()
  (widen)
  (tmolnar/jump-to-parent-task)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun tmolnar/narrow-to-agenda-subtree ()
  (interactive)
  (when (equal major-mode 'org-agenda-mode)
    (org-with-point-at (org-get-at-bol 'org-hd-marker) (tmolnar/org-narrow-to-subtree))
    (when org-agenda-sticky (org-agenda-redo))
    (tmolnar/org-narrow-to-subtree)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N" 'tmolnar/narrow-to-agenda-subtree))
          'append)

;;; Widening the narrowed Org Agenda
(defun tmolnar/widen-agenda-subtree ()
  (interactive)
  (when (equal major-mode 'org-agenda-mode)
    (org-agenda-remove-restriction-lock)
    (widen))
  (when org-agenda-sticky (org-agenda-redo))
  (beginning-of-buffer))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" (lambda () (interactive) (tmolnar/widen-agenda-subtree))))
          'append)
#+END_SRC

*** Agenda views
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("g" . "GTD Agendas")
        ("ga" "All in One Agenda (All items in one screen)"
         ((agenda)
          (tags-todo "/!+NEXT"
                     ((org-agenda-overriding-header "=== Next project tasks ===")))
          (tags-todo "/!+TODO"
                     ((org-agenda-overriding-header "=== Projects ===")
                      (org-agenda-skip-function 'tmolnar/skip-tasks)))
          (tags-todo "/!+TODO"
                     ((org-agenda-overriding-header "=== Tasks ===")
                      (org-agenda-skip-function 'tmolnar/skip-projects)))
          (tags-todo "/!+WAIT"
                     ((org-agenda-overriding-header "=== Waiting items ===")))))
        ("go" "Office Agenda (Business and work related private stuff)"
         ((agenda)
          (tags-todo "/!+NEXT"
                     ((org-agenda-overriding-header "Next project tasks")))
          (tags-todo "/!+TODO"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function 'tmolnar/skip-tasks)))
          (tags-todo "/!+TODO"
                     ((org-agenda-overriding-header "Tasks")
                      (org-agenda-skip-function 'tmolnar/skip-projects)))
          (tags-todo "/!+WAIT"
                     ((org-agenda-overriding-header "Waiting items"))))
         ((org-agenda-files '("~/OneDrive/Documents/org/work/"))))
        ("gp" "Personal Agenda (Personal life todos)"
         ((agenda)
          (tags-todo "/!+NEXT"
                     ((org-agenda-overriding-header "Next project tasks")))
          (tags-todo "/!+TODO"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function 'tmolnar/skip-tasks)))
          (tags-todo "/!+TODO"
                     ((org-agenda-overriding-header "Tasks")
                      (org-agenda-skip-function 'tmolnar/skip-projects)))
          (tags-todo "/!+WAIT"
                     ((org-agenda-overriding-header "Waiting items"))))
         ((org-agenda-files '("~/OneDrive/Documents/org/organizer"))))
        ("d" .  "Deadlines")
        ("dd" "Upcoming deadlines in one screen" agenda ""
         ((org-agenda-entry-types '(:deadline))
          (org-agenda-span 1)
          (org-deadline-warning-days 60)
          (org-agenda-time-grid nil)))))
#+END_SRC

*** Sticky Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-sticky t)
#+END_SRC

*** Honor the startup visibility of the agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-inhibit-startup nil)
#+END_SRC

*** Do not show the intherited tags in the Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-show-inherited-tags nil)
#+END_SRC

*** Agenda time grid is enabled (G disables it)
#+BEGIN_SRC emacs-lisp
(setq org-agenda-use-time-grid t)
#+END_SRC

*** Enable the Agenda key combination
#+BEGIN_SRC emacs-lisp 
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC

*** Open the agenda in a full window
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+END_SRC

*** Always open the agenda in day view
#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 'day)
#+END_SRC

*** Do not dim the blocked tasks in the Agenda
#+BEGIN_SRC emacs-lisp 
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

*** Do not show the DONE tasks (timestamp, SCHEDULED and DEADLINE)
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-timestamp-if-done t)
#+END_SRC

*** Compact block agenda view
#+BEGIN_SRC emacs-lisp 
(setq org-agenda-compact-blocks t)
#+END_SRC

*** Find gaps in the continuous clocking
#+BEGIN_SRC emacs-lisp
(setq org-agenda-clock-consistency-checks
      '(:max-duration "4:00" :min-duration 0 :max-gap 0 :gap-ok-around ("4:00")))
#+END_SRC

*** Disable tag inheritance in the agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-use-tag-inheritance nil)
#+END_SRC

*** Show deadlines 30 days ahead
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 30)
#+END_SRC

*** Habit tracking
#+BEGIN_SRC emacs-lisp
;(setq org-habit-preceding-days 21)
;(setq org-habit-following-days 5)
;(setq org-habit-graph-column 54)
#+END_SRC

*** Display tags farther from the task
#+BEGIN_SRC emacs-lisp
(setq org-agenda-tags-column -102)
#+END_SRC

*** Show diary entries in the Agenda
#+begin_src emacs-lisp
(setq org-agenda-include-diary t)
#+end_src
** Cryptography
*** Enable cryptography
#+BEGIN_SRC emacs-lisp 
(require 'org-crypt)
#+END_SRC

*** Crypt data before saving it
#+BEGIN_SRC emacs-lisp 
(org-crypt-use-before-save-magic)
#+END_SRC

*** Use symmetric keys
#+BEGIN_SRC emacs-lisp 
(setq org-crypt-key nil)
#+END_SRC

** Always highlight the current agenda line
#+BEGIN_SRC emacs-lisp  
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)
#+END_SRC

** Org Appt reminder configuration
*** Function to rebuild reminders
#+BEGIN_SRC emacs-lisp 
(defun tmolnar/org-agenda-to-appt ()
  "Rebuild all appt reminders"
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))
#+END_SRC

*** Keep the reminder window open for 50 sec
#+BEGIN_SRC emacs-lisp 
(setq appt-display-duration 50)
#+END_SRC

*** Show reminders in 20 minutes advance
#+BEGIN_SRC emacs-lisp 
(setq appt-message-warning-time 20)
#+END_SRC

*** Rebuild reminders when displaying the agenda
#+BEGIN_SRC emacs-lisp 
(if (string= (car (split-string org-version "\\.")) "9")
    (add-hook 'org-agenda-mode-hook 'tmolnar/org-agenda-to-appt 'append)
  (add-hook 'org-finalize-agenda-hook 'tmolnar/org-agenda-to-appt 'append))
#+END_SRC

*** Rebuild reminders at noon
#+BEGIN_SRC emacs-lisp 
(run-at-time "12:00" nil 'tmolnar/org-agenda-to-appt)
#+END_SRC

*** Rebuild reminders when Emacs starts
#+BEGIN_SRC emacs-lisp 
(tmolnar/org-agenda-to-appt)
#+END_SRC

*** Notification format
#+BEGIN_SRC emacs-lisp 
(setq appt-display-format 'echo)
#+END_SRC

*** Activate appt to get reminders
#+BEGIN_SRC emacs-lisp 
(appt-activate t)
#+END_SRC
** Do not round the numbers when modifying time entries
#+BEGIN_SRC emacs-lisp 
(setq org-time-stamp-rounding-minutes (quote (1 1)))
#+END_SRC

** Do not add notes and timestamps when using S-left/S-right on tasks
#+BEGIN_SRC emacs-lisp 
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

** Do not indent source block while editing
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

** Native syntax highlight in source blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Open source edit window in the current one
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** Show error on invisible edits
#+BEGIN_SRC emacs-lisp 
(setq org-catch-invisible-edits 'show-and-error)
#+END_SRC

** Capture templates and refile
*** Enable capture mode "C-c c"
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp 
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/OneDrive/Documents/org/organizer/inbox.org" "Tasks")
         "* TODO %?\nDEADLINE: %t")
        ("n" "Meeting notes" entry (file+headline "~/OneDrive/Documents/org/organizer/inbox.org" "Meetings")
         (file "~/stuff/org_templates/meeting_notes.org"))))
#+END_SRC

*** Refile must look deeper into headers
#+BEGIN_SRC emacs-lisp 
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 5))))
#+END_SRC

*** Default capture file
#+BEGIN_SRC emacs-lisp 
(setq org-default-notes-file "~/OneDrive/Documents/org/organizer/inbox.org")
#+END_SRC

*** Refile to the first element of the tree
#+BEGIN_SRC emacs-lisp 
(setq org-reverse-note-order t)
#+END_SRC

*** Allow refile to create parent tasks
#+BEGIN_SRC emacs-lisp 
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

*** Use ido mode for refile task completion
#+BEGIN_SRC emacs-lisp 
(setq org-completion-use-ido t)
#+END_SRC

*** File name and full outline paths for refiling
#+BEGIN_SRC emacs-lisp 
(setq org-refile-use-outline-path 'file)
#+END_SRC

** Column view
*** Default column view
#+BEGIN_SRC emacs-lisp 
(setq org-columns-default-format "%50ITEM(Task) %17EFFORT(Estimated){:} %17CLOCKSUM(Spent)")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-overriding-columns-format "%50ITEM(Task) %17EFFORT(Estimated) %17CLOCKSUM(Spent)")
#+END_SRC

*** Global properties
#+BEGIN_SRC emacs-lisp 
(setq org-global-properties (quote (("EFFORT_ALL" . "0:10 0:20 0:30 0:45 1:00 1:30 2:00 2:30 3:00 3:30 4:00 6:00 8:00"))))
#+END_SRC

** Todo keywords, sequences, state triggers and faces
*** Todo keyword sequences
    - Record a note when entering to and timestamp when leaving from WAIT
    - CANELED tasks need an explanation note
#+BEGIN_SRC emacs-lisp 
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAIT(w@)" "|" "CANCELED(x@)")))
#+END_SRC

*** Todo faces
#+BEGIN_SRC emacs-lisp 
(setq org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
        ("NEXT" :foreground "cyan" :weight bold)
        ("DONE" :foreground "green" :weight bold)
        ("WAIT" :foreground "peru" :weight bold)
        ("CANCELED" :foreground "green" :weight bold)))
#+END_SRC

*** Priority faces
#+BEGIN_SRC emacs-lisp
(setq org-priority-faces '((?A . (:foreground "red"))
                           (?B . (:foreground "yellow"))
                           (?C . (:foreground "green"))))
#+END_SRC

*** Do not allow parent todo item marked as DONE if children are not DONE
#+BEGIN_SRC emacs-lisp 
(setq org-enforce-todo-dependencies t)
#+END_SRC

*** Do not allow parent checkbox to be checked if children are not checked
#+BEGIN_SRC emacs-lisp 
(customize-set-variable 'org-enforce-todo-checkbox-dependencies t)
#+END_SRC

*** Todo state triggers
#+BEGIN_SRC emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("WAIT" ("wait" . t))
              ("TODO" ("wait"))
              ("NEXT" ("wait"))
              ("CANCELED" ("wait")))))
#+END_SRC

** Tag lists, inheritance and faces
*** Tag lists
#+BEGIN_SRC emacs-lisp 
(setq org-tag-alist '(("office" . ?o)
                      ("personal" . ?p)
                      ("crypt" . ?c)
                      ("infinite" . ?i)))
#+END_SRC

*** Tag faces
#+BEGIN_SRC emacs-lisp 
(setq org-tag-faces '(("office" . (:foreground "red"))
                      ("personal" . (:foreground "orange red"))
                      ("wait" . (:foreground "peru"))
                      ("crypt" . (:foreground "red"))
                      ("infinite" . (:foreground "green"))))
#+END_SRC

*** Do not inherit these tags
#+BEGIN_SRC emacs-lisp 
(setq org-tags-exclude-from-inheritance '("crypt"))
#+END_SRC

** Clocking
*** Automatic clocking, Check In / Check Out
#+BEGIN_SRC emacs-lisp
(defvar tmolnar/default-clock-task "5da25e80-9835-451a-bf2b-6e702f3a773c")

(defun tmolnar/clock-in-default-task ()
  "Clock in to the default task.

Find it by its unique ID and clock in."
  (interactive)
  (org-with-point-at (org-id-find tmolnar/default-clock-task 'mark)
    (org-clock-in '(16))))

(defun tmolnar/check-in ()
  "Check in to \"work mode\" to clock continuously."
  (interactive)
  (setq tmolnar/force-clocking t)
  (tmolnar/clock-in-default-task))

(defun tmolnar/check-out ()
  "Check out from \"work mode\" and stop the clocking."
  (interactive)
  (setq tmolnar/force-clocking nil)
  (when (org-clock-is-active)
    (org-clock-out)))

(defun tmolnar/clock-in-if-checked-in ()
  "Clock in to Organizer when \"work mode\" is on.

If the \"work mode\" is on, then the clock must always run.
If there is no clocking task, then the Organizer will be clocked."
  (when (and tmolnar/force-clocking
             (not org-clock-clocking-in))
    (tmolnar/clock-in-default-task)))

(add-hook 'org-clock-out-hook 'tmolnar/clock-in-if-checked-in 'append)

(defun tmolnar/check-force-clocking ()
  "Check if the continuous clocking is set."
  (interactive)
  (if (bound-and-true-p tmolnar/force-clocking)
      (message "Currently clocking: %s" org-clock-current-task)
    (message "Work mode: checked OUT")))

;; F9 - c(heck), it checks the force clocking setting
(global-set-key (kbd "<f9> c") 'tmolnar/check-force-clocking)
(global-set-key (kbd "<f9> i") 'tmolnar/check-in)
(global-set-key (kbd "<f9> o") 'tmolnar/check-out)
#+END_SRC

*** Find the default task and clock-in by ID
- Set the org-id of the default task
- Create a function that marks the default task, then clocks in with C-u C-u prefix (16)
- Bind the C-c i keys to this function
#+BEGIN_SRC emacs-lisp
;(defvar my-default-clock-task "5da25e80-9835-451a-bf2b-6e702f3a773c")
;(defun my-clock-in-default-task ()
;  (interactive)
;  (org-with-point-at (org-id-find my-default-clock-task 'mrkr)
;    (org-clock-in '(16))))
;(global-set-key (kbd "C-c i") 'my-clock-in-default-task)
#+END_SRC

*** Resume clocking task when emacs is restarted
#+BEGIN_SRC emacs-lisp 
(org-clock-persistence-insinuate)
#+END_SRC

*** Save clocking in task when the Emacs is closed, continue clocking when it is opened
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist t)
#+END_SRC

*** Save clock data into the LOGBOOK drawer
#+BEGIN_SRC emacs-lisp 
(setq org-clock-into-drawer t)
#+END_SRC

*** Always log state changes and notes into a drawer
#+BEGIN_SRC emacs-lisp 
(setq org-log-into-drawer t)
#+END_SRC

*** Remove clocked tasks with zero duration
#+BEGIN_SRC emacs-lisp 
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC

*** Clock history length
#+BEGIN_SRC emacs-lisp 
(setq org-clock-history-length 23)
#+END_SRC

*** Include current clocking task in clock reports
#+BEGIN_SRC emacs-lisp 
(setq org-clock-report-include-clocking-task t)
#+END_SRC

*** Continuous clocking (clock-in from the last clock-out time)
#+BEGIN_SRC emacs-lisp
(setq org-clock-continuously t)
#+END_SRC

*** Count-down when clocking in (Pomodoro)
#+BEGIN_SRC emacs-lisp
(setq org-timer-default-timer 25)
;(add-hook 'org-clock-in-hook (lambda() (org-timer-set-timer '(16))))
#+END_SRC

** Enable and disable keys, custom keybindings
#+BEGIN_SRC emacs-lisp 
(add-hook 'org-mode-hook
          '(lambda ()
             (org-defkey org-mode-map "\C-c[" 'undefined)
             (org-defkey org-mode-map "\C-c]" 'undefined)
             (org-defkey org-mode-map "\C-c;" 'undefined))
          'append)

(global-set-key "\C-cb" 'org-switchb)
#+END_SRC

** Disable sub- and superscripts
#+BEGIN_SRC emacs-lisp 
(setq org-use-sub-superscripts nil)
(setq org-export-with-sub-superscripts nil)
#+END_SRC

** Archive to a specific headline
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "%s_archive::* Archived Tasks")
#+END_SRC

** Hide new lines during org cycling
#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 0)
#+END_SRC

* Load the init.el if exists
#+BEGIN_SRC emacs-lisp
(if (file-exists-p (expand-file-name "init.el" user-emacs-directory))
    (load (expand-file-name "init.el" user-emacs-directory)))
#+END_SRC
